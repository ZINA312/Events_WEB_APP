// <auto-generated />
using System;
using Events_WEB_APP.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Events_WEB_APP.Persistence.Migrations
{
    [DbContext(typeof(EventsAppDbContext))]
    [Migration("20250305115124_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Events_WEB_APP.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CategoryID")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("Name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Events_WEB_APP.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("EventID")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CategoryID")
                        .HasAnnotation("Relational:JsonPropertyName", "categoryId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Image")
                        .HasAnnotation("Relational:JsonPropertyName", "imagePath");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Location")
                        .HasAnnotation("Relational:JsonPropertyName", "location");

                    b.Property<int>("MaxNumOfParticipants")
                        .HasMaxLength(10)
                        .HasColumnType("integer")
                        .HasColumnName("MaxNumOfParticipants")
                        .HasAnnotation("Relational:JsonPropertyName", "maxNumOfParticipants");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("Events_WEB_APP.Core.Entities.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ParticipantID")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BirthDate")
                        .HasAnnotation("Relational:JsonPropertyName", "birthDate");

                    b.Property<DateTime>("DateTimeOfRegistration")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateTimeOfRegistration");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("Email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "eventId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("FirstName")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("LastName")
                        .HasAnnotation("Relational:JsonPropertyName", "lastName");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Participants", (string)null);
                });

            modelBuilder.Entity("Events_WEB_APP.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("RoleId")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a877850-8d00-4ede-b0e8-a0765135b5af"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("4e850035-55c5-427a-8f6a-698f41c8a8f5"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Events_WEB_APP.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UserID")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("Email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("RefreshToken");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("UserName")
                        .HasAnnotation("Relational:JsonPropertyName", "userName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cccb650-4f23-4785-a408-13c1e6126cd3"),
                            Email = "admin@events.com",
                            PasswordHash = "$2a$11$aGCgAQybgC0p6PahELc4yOuSOIEfCSRJ3S43WUsl8mGf52vKn7V2C",
                            RefreshTokenExpiry = new DateTime(2026, 3, 5, 11, 51, 23, 643, DateTimeKind.Utc).AddTicks(1601),
                            RoleId = new Guid("4a877850-8d00-4ede-b0e8-a0765135b5af"),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Events_WEB_APP.Core.Entities.Event", b =>
                {
                    b.HasOne("Events_WEB_APP.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Events_WEB_APP.Core.Entities.Participant", b =>
                {
                    b.HasOne("Events_WEB_APP.Core.Entities.User", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Events_WEB_APP.Core.Entities.User", b =>
                {
                    b.HasOne("Events_WEB_APP.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Events_WEB_APP.Core.Entities.User", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
